#!/bin/sh
#
# Print a warning message using wall or send it via email if watched directories under git contain
# uncommited changes.

CONFIG="/usr/local/etc/repo-dirty-checker.conf"

DATA_DIR="/var/tmp/repo-dirty-checker"

# ShellCheck directive, DO NOT REMOVE!
# shellcheck source=repo-dirty-checker.conf
. $CONFIG

init_run_file() {
	echo 0 > "${1}"
}

init_users_file() {
	echo > "${1}"
}

init_date_file() {
	echo > "${1}"
}

print_warning() {
	wall <<-END
	Warning: uncommited changes detected in ${1}. Please clean up!
	END
}

send_mail() {
	mail -s "${MAIL_SUBJECT} ${3}" ${MAIL_ADDRESSES} <<-END
	Warning: uncommited changes detected in ${1}. Please clean it up!

	These users were online when the mess was detected:
	${2}
	END
}

main() {
	mkdir -p "${DATA_DIR}" || exit 1

	for dir in ${WATCHED_DIRS}; do
		data_subdir="${DATA_DIR}${dir}"
		run_file="${data_subdir}/run"
		users_file="${data_subdir}/users"
		date_file="${data_subdir}/date"

		mkdir -p "${data_subdir}" || exit 1

		if [ ! -f "${run_file}" ]; then
			touch "${run_file}" || exit 1

			init_run_file "${run_file}"
		fi

		if [ ! -f "${users_file}" ]; then
			touch "${users_file}" || exit 1

			init_users_file "${users_file}"
		fi

		if [ ! -f "${date_file}" ]; then
			touch "${date_file}" || exit 1

			init_date_file "${date_file}"
		fi

		cd "${dir}" || exit 1

		if [ ! -z "$(git status --porcelain)" ]; then
			run="$(cat "${run_file}")"
			users="$(cat "${users_file}")"

			if [ "${run}" -eq "0" ]; then
				users="$(who | cut -d ' ' -f 1 | sort -u)"

				echo "${users}" > "${users_file}"
				
				echo "$(date "+[%Y-%m-%d %H:%M]")" > "${date_file}"
			fi

			date="$(cat "${date_file}")"

			run="$(expr "${run}" + 1)"

			echo "${run}" > "${run_file}"

			if [ "${run}" -ge "${WALL_AFTER}" ]; then
				runs_after="$(expr "${run}" - "${WALL_AFTER}")"

				if [ "$(expr "${runs_after}" % "${WALL_PERIOD}")" -eq "0" ]; then
					print_warning "${dir}" "${users}" "${date}"
				fi
			fi

			if [ "${run}" -ge "${MAIL_AFTER}" ]; then
				runs_after="$(expr "${run}" - "${MAIL_AFTER}")"

				if [ "$(expr "${runs_after}" % "${MAIL_PERIOD}")" -eq "0" ]; then
					send_mail "${dir}" "${users}" "${date}"
				fi
			fi
		else
			init_run_file "${run_file}"

			init_users_file "${users_file}"
		fi
	done
}

main "$@"
