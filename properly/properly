#!/bin/sh

# Execute command properly. For what that means, please read the last
# section of this scirpt.

### READ CONFIG ################################################################

CONFIG='/usr/local/etc/properly.conf'
. $CONFIG

### ARGUMENTS PARSING ##########################################################

usage() {
	echo "Usage: $0 [-m message] [-t tag] command [arguments...]"
	exit 1
}

parse_args() {
	# Parses arguments and removes properly-specific arguments from argument
	# list, so that other arguments may be passed to command being executed
	while getopts "m:t:" opt; do
		case ${opt} in
			t)
				message=${OPTARG}
				;;
			s)
				tag=${OPTARG}
				;;
		esac
	done
	shift $(( ${OPTIND} - 1 )) # TODO: odprasit
	command="$@"
	[ -z "${command}" ] && usage
	if [ -z "${message}" ]; then
		message="$(to_message ${command})"
		readonly message
	fi
	if [ -z "${tag}" ]; then
		tag="$(to_tag ${message})"
		readonly tag
	fi
}

to_message() {
	date "+$* %Y/%m/%d"
}

to_tag() {
	echo "$@" | tr ' /\t' '---'
}

### HELPER FUNCTIONS ###########################################################

STDOUT_PREFIX=' * '
STDOUT_COMPLAIN_PREFIX='!!!'

complain() {
	echo "${STDOUT_COMPLAIN_PREFIX} $@"
	read -p "${STDOUT_COMPLAIN_PREFIX}     Type \"yes\" to continue (on your own responsibility): " REPLY
	if [ x"${REPLY}" != x'yes' ]; then
		msg 'Aborted.'
		exit 47
	fi
}

msg() {
	echo "${STDOUT_PREFIX}$@"
}

ask() {
	read -p "${STDOUT_PREFIX}$@ [Y/n] " REPLY
	[ x"${REPLY}" = x -o x"${REPLY}" = x"Y" -o x"${REPLY}" = x"y" ]
}

execute() {
	${command} || msg "(exit status: $?)"
}

### CHECKS AND ACTIONS #########################################################

dirty_config_dirs() {
	# Returns all config dirs with uncommitted changes, if any.
	local dirty=""
	for dir in ${etcundergit_dirs}; do
		( cd ${dir} && [ -z "$(git status --porcelain)" ] ) || dirty="${dirty} ${dir}"
	done
	echo ${dirty}
}

check_config_clean() {
	# Check and inform user that config dirs are dirty so that autocommit won't
	# mess things up
	local dirty_dirs="$(dirty_config_dirs)"
	for d in ${dirty_dirs}; do
		msg "${d} is dirty"
	done
	[ -z "${dirty_dirs}" ]
}

commit_config() {
	local commit_message="$1"
	local tag_name="$2"
	for d in $(dirty_config_dirs); do
		(
			cd ${d}
			run_git add --all .
			# empty commit just prints a message
			run_git commit -m "${commit_message} [autocommit]" && run_git tag "${tag_name}"
		)
	done
}

do_snapshot() {
	msg "creating snapshot: ${snapshot}"
	run_zfs_snapshot ${snapshot_subvol} ${1}
}

log() {
	# TODO this is a placeholder. Call real logger here.
	# $1 is message, $2 is tag, $3 is the command that was used
}

### "PROPERLY" SEQUENCE ########################################################

properly() {
	# Executing $command properly means:
	msg '=== 0) check if config directories (such as /etc) are clean =============='
	check_config_clean || complain 'Uncommitted config changes!'
	msg '=== 1) snapshot =========================================================='
	do_snapshot "pre-${tag}" || complain "Cannot create snapshot (exit code $?)!"
	msg '=== execute command ======================================================'
	execute "${command}"
	msg '=== n-2) commit config changes ==========================================='
	ask 'Autocommit config changes?' && commit_config "${message}" "${tag}"
	msg '=== n-1) snapshot ========================================================'
	do_snapshot "post-${tag}" || msg "Couldn't create snapshot (exit code $?)!"
	msg '=== n) log the change ===================================================='
	log "${message}" "${tag}" "${command}"
	msg 'Done. Check setup log and commit it when you are done.'
}

### MAIN #######################################################################

main() {
	parse_args "$@"
	properly
}

main "$@"
