#!/usr/bin/env python3

import sys
import datetime
import argparse

DEFAULT_CONFIG_FILE_PATH = '/usr/local/etc/trojsten-log.conf'
DEFAULT_LOG_MARKER = '<!-- begin setup log -->'


def warning():
    print("Warning: last topic date different from current system date, consider adding new topic",
    file=sys.stderr)


def find_marker(marker, lines):
    for i in range(len(lines)):
        if marker in lines[i]:
            return i

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Write a record about using a command into a \
log-file")

    parser.add_argument('--config', default=DEFAULT_CONFIG_FILE_PATH, dest='config',
        help='Specify config file path, defaults to %(default)s')
        
    parser.add_argument('-l', metavar='LOGFILE', dest='log_file_path', 
        type=argparse.Filetype('r+', encoding='UTF-8'), 
        help='Override log file path specified in CONFIG')
    
    parser.add_argument('-t', metavar='NEW_TITLE', dest='new_title', 
        help='Add new title with current date')

    parser.add_argument('-d', metavar='YYYY-MM-DD', dest='date', 
        type=lambda x: datetime.strptime(x, '%Y-%m-%d').date(), 
        help='Override current date when adding new title. This option is ignored if \'-t\' is \
not present')
       
    parser.add_argument('-c', metavar='COMMAND', dest='command', 
        help='Add a command as a subbullet')
        
    parser.add_argument('message', metavar='MESSAGE', type=str, nargs='+',
        help='Message to be added to the logfile')
    
    args = parser.parse_args()
        
    if args.date is None:
        args.date = str(datetime.date.today())
    args.message = ' '.join(args.message)
    args.marker = None
    with open(args.config_file_path) as cfg:
        for line in cfg:
            line = line.strip().split('=')
            if line[0] == 'log_marker':
                args.marker = line[1]
            elif line[0] == 'setup_log_path' and args.log_file_path is None:
                args.log_file_path = line[1]
    if args.marker is None:
        args.marker = DEFAULT_LOG_MARKER

    lines = open(args.log_file_path).readlines()

    if args.new_title is not None:
        new_topic = ["\n"]

        line = "{} ({})\n".format(args.new_title, args.date))
        new_topic.append(line)
        new_topic.append("-" * (len(line)-1) + "\n")
        new_topic.append("\n")

        new_topic.append("  * {}\n".format(args.message))
        if args.command is not None:
            new_topic.append("    * `{}`\n".format(args.command))

        i = find_marker(args.marker, lines)

        lines[i+1:i+1] = new_topic

    else:
        i = find_marker(args.marker, lines)

        i += 2
        last_date = lines[i][lines[i].index('(')+1:-2]
        if str(datetime.date.today()) != last_date:
            warning()

        i += 2
        while lines[i] != "\n":
            i += 1

        new_message = ["  * {}".format(args.message)]
        if args.command is not None:
            new_message.append("    * `{}`".format(args.command))

        lines[i:i] = new_message

    with open(log_file_path, 'w') as out_log:
        out_log.writelines(lines)

